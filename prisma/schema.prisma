generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  role         Role           @default(USER)
  password     String?
  createdAt    DateTime       @default(now())
  avatar       String?
  bio          String?
  phone        String?
  wa           String
  fcmToken     String?
  address      Address?
  Cart         Cart[]
  Notification Notification[]
  Ojek         Ojek[]
  Review       Review[]
  Transaction  Transaction[]
}

model Address {
  id         String    @id @default(uuid())
  zip        String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String?   @unique
  kabupaten  String
  kecamatan  String
  keterangan String
  kelurahan  String
  deletedAt  DateTime?
  sellerId   String?   @unique
  seller     Seller?   @relation(fields: [sellerId], references: [id])
  userInfo   User?     @relation(fields: [userId], references: [id])
}

model Seller {
  id        String    @id @default(uuid())
  name      String
  email     String?   @unique
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  addresses Address?
  products  Product[]
}

model Product {
  id              String            @id @default(uuid())
  name            String
  price           Int
  quantity        Int
  sellerName      String
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  sellerId        String?
  categoryId      String?
  CartItem        CartItem[]
  images          Image?
  category        Category?         @relation(fields: [categoryId], references: [id])
  seller          Seller?           @relation(fields: [sellerId], references: [id])
  TransactionItem TransactionItem[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Product   Product[]
}

model Image {
  id        String    @id @default(uuid())
  url       String
  productId String    @unique
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Transaction {
  id        String            @id @default(uuid())
  userId    String
  total     Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  deletedAt DateTime?
  status    OrderStatus       @default(PENDING)
  user      User              @relation(fields: [userId], references: [id])
  items     TransactionItem[]
}

model TransactionItem {
  id            String      @id @default(uuid())
  transactionId String
  productId     String
  quantity      Int
  price         Int
  ojekId        String?
  ojek          Ojek?       @relation(fields: [ojekId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  userId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        String    @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model Ojek {
  id                String            @id @default(uuid())
  alamatPenjemputan String
  alamatTujuan      String
  total             Int
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  delettedAt        DateTime?
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  TransactionItem   TransactionItem[]
}

enum Role {
  ADMIN
  DRIVER
  USER
}

enum OrderStatus {
  PENDING
  SHIPPING
  DELIVERED
}
